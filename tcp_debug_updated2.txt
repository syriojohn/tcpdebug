# List of target ports to monitor
$ports = @(7077, 9099, 8088)

while ($true) {
    Clear-Host

    Write-Host "Checking TCP connections to ports: $($ports -join ', ') on ALL local IP addresses and interfaces (including server hostname/IP and localhost) at $(Get-Date)" -ForegroundColor Cyan
    Write-Host "(This includes connections from remote clients and local processes)" -ForegroundColor Yellow

    # Get all TCP connections to the specified ports
    $connections = Get-NetTCPConnection | Where-Object {
        $ports -contains $_.LocalPort
    }

    if ($connections) {
        # Group by LocalPort and count connections
        $grouped = $connections | Group-Object LocalPort | Sort-Object Name
        Write-Host "`nConnection counts per port:" -ForegroundColor Green
        foreach ($g in $grouped) {
            Write-Host ("Port {0}: {1} connections" -f $g.Name, $g.Count) -ForegroundColor White
        }

        Write-Host "`nConnection details (including process owner):" -ForegroundColor Green

        $connections | ForEach-Object {
            $procName = try { (Get-Process -Id $_.OwningProcess).ProcessName } catch { "N/A" }
            $procUser = try {
                $proc = Get-WmiObject Win32_Process -Filter "ProcessId = $($_.OwningProcess)"
                $out = $null
                $proc.GetOwner([ref]$out, [ref]$null)
                $out
            } catch { "N/A" }
            [PSCustomObject]@{
                LocalAddress  = $_.LocalAddress
                LocalPort     = $_.LocalPort
                RemoteAddress = $_.RemoteAddress
                RemotePort    = $_.RemotePort
                State         = $_.State
                OwningProcess = $_.OwningProcess
                ProcessName   = $procName
                ProcessOwner  = $procUser
            }
        } | Format-Table -AutoSize
    } else {
        Write-Host "No connections found to the specified ports at this time." -ForegroundColor Yellow
    }

    Start-Sleep -Seconds 10
}